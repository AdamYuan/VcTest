//GENERATED BY GLSL_GEN
#ifndef VOXELMIPMAPSHADER_HPP
#define VOXELMIPMAPSHADER_HPP
#include <glm/glm.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <fstream>
#include <GL/gl3w.h>
namespace asserts {
class VoxelMipmapShader {
private:
	GLuint program_{0};
public:
	void Use() const { glUseProgram(program_); }
	GLuint Get() const { return program_; }
	VoxelMipmapShader() = default;
	~VoxelMipmapShader(){ if(program_ != 0) glDeleteProgram(program_); }
	VoxelMipmapShader(const VoxelMipmapShader &) = delete;
	VoxelMipmapShader& operator= (const VoxelMipmapShader &) = delete;
private:
	GLint unif_uVoxelDimensionMipmap;
	GLint unif_uSourceLod;
public:
	void Initialize() {
		GLuint shader;
		program_ = glCreateProgram();
		std::ifstream in; std::string str;
		char log[100000]; int success;
		in.open("shaders/voxel_mipmap.comp");
		if(in.is_open()) {
			std::getline(in, str, '\0');
			in.close();
		} else {
			str.clear();
			printf("[GLSLGEN ERROR] failed to load shaders/voxel_mipmap.comp\n");
		}
		const char *GL_COMPUTE_SHADER_src = str.c_str();
		shader = glCreateShader(GL_COMPUTE_SHADER);
		glShaderSource(shader, 1, &GL_COMPUTE_SHADER_src, nullptr);
		glCompileShader(shader);
		glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
		if(!success) {
			glGetShaderInfoLog(shader, 100000, nullptr, log);
			printf("[GLSLGEN ERROR] compile error in shaders/voxel_mipmap.comp:\n%s\n", log);
		}
		glAttachShader(program_, shader);
		glLinkProgram(program_);
		glDeleteShader(shader);
		unif_uVoxelDimensionMipmap = glGetUniformLocation(program_, "uVoxelDimensionMipmap");
		unif_uSourceLod = glGetUniformLocation(program_, "uSourceLod");
	}
	void SetUVoxelDimensionMipmap(const glm::ivec3 &v) { glProgramUniform3iv(program_, unif_uVoxelDimensionMipmap, 1, glm::value_ptr(v)); }
	GLint GetUVoxelDimensionMipmapLocation() const { return unif_uVoxelDimensionMipmap; };
	void SetUSourceLod(GLint v) { glProgramUniform1i(program_, unif_uSourceLod, v); }
	GLint GetUSourceLodLocation() const { return unif_uSourceLod; };
};
}
#endif
