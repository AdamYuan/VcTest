//GENERATED BY GLSL_GEN
#ifndef HALFSHADER_HPP
#define HALFSHADER_HPP
#include <glm/glm.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <fstream>
#include <GL/gl3w.h>
namespace asserts {
class HalfShader {
private:
	GLuint program_{0};
public:
	void Use() const { glUseProgram(program_); }
	GLuint Get() const { return program_; }
	HalfShader() = default;
	~HalfShader(){ if(program_ != 0) glDeleteProgram(program_); }
	HalfShader(const HalfShader &) = delete;
	HalfShader& operator= (const HalfShader &) = delete;
private:
public:
	void Initialize() {
		GLuint shader;
		program_ = glCreateProgram();
		std::ifstream in; std::string str;
		char log[100000]; int success;
		in.open("shaders/quad.vert");
		if(in.is_open()) {
			std::getline(in, str, '\0');
			in.close();
		} else {
			str.clear();
			printf("[GLSLGEN ERROR] failed to load shaders/quad.vert\n");
		}
		const char *GL_VERTEX_SHADER_src = str.c_str();
		shader = glCreateShader(GL_VERTEX_SHADER);
		glShaderSource(shader, 1, &GL_VERTEX_SHADER_src, nullptr);
		glCompileShader(shader);
		glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
		if(!success) {
			glGetShaderInfoLog(shader, 100000, nullptr, log);
			printf("[GLSLGEN ERROR] compile error in shaders/quad.vert:\n%s\n", log);
		}
		glAttachShader(program_, shader);
		glLinkProgram(program_);
		glDeleteShader(shader);
		in.open("shaders/half.frag");
		if(in.is_open()) {
			std::getline(in, str, '\0');
			in.close();
		} else {
			str.clear();
			printf("[GLSLGEN ERROR] failed to load shaders/half.frag\n");
		}
		const char *GL_FRAGMENT_SHADER_src = str.c_str();
		shader = glCreateShader(GL_FRAGMENT_SHADER);
		glShaderSource(shader, 1, &GL_FRAGMENT_SHADER_src, nullptr);
		glCompileShader(shader);
		glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
		if(!success) {
			glGetShaderInfoLog(shader, 100000, nullptr, log);
			printf("[GLSLGEN ERROR] compile error in shaders/half.frag:\n%s\n", log);
		}
		glAttachShader(program_, shader);
		glLinkProgram(program_);
		glDeleteShader(shader);
	}
};
}
#endif
