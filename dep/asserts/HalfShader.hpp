//GENERATED BY GLSL_GEN
#ifndef HALFSHADER_HPP
#define HALFSHADER_HPP
#include <glm/glm.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <fstream>
#include <sstream>
#include <GL/gl3w.h>
namespace asserts {
class HalfShader {
private:
	GLuint program_{0};
public:
	void Use() const { glUseProgram(program_); }
	GLuint Get() const { return program_; }
	HalfShader() = default;
	~HalfShader(){ if(program_ != 0) glDeleteProgram(program_); }
	HalfShader(const HalfShader &) = delete;
	HalfShader& operator= (const HalfShader &) = delete;
private:
public:
	void Initialize() {
		GLuint shader;
		program_ = glCreateProgram();
		const char *GL_VERTEX_SHADER_src = "#version 450 core\n\nlayout (location = 0) in vec2 aPosition;\nlayout (location = 1) in vec2 aTexcoords;\n\nout vec2 vTexcoords;\n\nvoid main()\n{\n	gl_Position = vec4(aPosition, 1.0, 1.0);\n	vTexcoords = aTexcoords;\n}\n";
		shader = glCreateShader(GL_VERTEX_SHADER);
		glShaderSource(shader, 1, &GL_VERTEX_SHADER_src, nullptr);
		glCompileShader(shader);
		glAttachShader(program_, shader);
		glLinkProgram(program_);
		glDeleteShader(shader);
		const char *GL_FRAGMENT_SHADER_src = "#version 450 core\n\nlayout (location = 0) out vec4 HalfGPosition;\nlayout (location = 1) out vec3 HalfGNormal;\n\nlayout (binding = 0) uniform sampler2D uGPosition;\nlayout (binding = 1) uniform sampler2D uGNormal;\n\nin vec2 vTexcoords;\n\nvoid main()\n{\n	ivec2 texel = ivec2(gl_FragCoord.xy) * 2;\n	HalfGPosition = texelFetch(uGPosition, texel, 0);\n	HalfGNormal = texelFetch(uGNormal, texel, 0).rgb;\n}\n";
		shader = glCreateShader(GL_FRAGMENT_SHADER);
		glShaderSource(shader, 1, &GL_FRAGMENT_SHADER_src, nullptr);
		glCompileShader(shader);
		glAttachShader(program_, shader);
		glLinkProgram(program_);
		glDeleteShader(shader);
	}
};
}
#endif
