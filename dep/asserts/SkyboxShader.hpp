//GENERATED BY GLSL_GEN
#ifndef SKYBOXSHADER_HPP
#define SKYBOXSHADER_HPP
#include <glm/glm.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <fstream>
#include <sstream>
#include <GL/gl3w.h>
namespace asserts {
class SkyboxShader {
private:
	GLuint program_{0};
public:
	void Use() const { glUseProgram(program_); }
	GLuint Get() const { return program_; }
	SkyboxShader() = default;
	~SkyboxShader(){ if(program_ != 0) glDeleteProgram(program_); }
	SkyboxShader(const SkyboxShader &) = delete;
	SkyboxShader& operator= (const SkyboxShader &) = delete;
private:
	GLint unif_uProjection;
	GLint unif_uView;
public:
	void Initialize() {
		GLuint shader;
		program_ = glCreateProgram();
		const char *GL_FRAGMENT_SHADER_src = "#version 450 core\nout vec4 FragColor;\nin vec3 vTexcoords;\nlayout (binding = 0) uniform samplerCube uSkyboxTexture;\nvoid main()\n{\n	FragColor = texture(uSkyboxTexture, vTexcoords);\n}\n";
		shader = glCreateShader(GL_FRAGMENT_SHADER);
		glShaderSource(shader, 1, &GL_FRAGMENT_SHADER_src, nullptr);
		glCompileShader(shader);
		glAttachShader(program_, shader);
		glLinkProgram(program_);
		glDeleteShader(shader);
		const char *GL_VERTEX_SHADER_src = "#version 450 core\nlayout (location = 0) in vec3 aPos;\nuniform mat4 uProjection, uView;\nout vec3 vTexcoords;\nvoid main()\n{\n	vTexcoords = aPos;\n	vec4 pos = uProjection * uView * vec4(aPos, 1.0);\n	gl_Position = pos.xyww;\n}\n";
		shader = glCreateShader(GL_VERTEX_SHADER);
		glShaderSource(shader, 1, &GL_VERTEX_SHADER_src, nullptr);
		glCompileShader(shader);
		glAttachShader(program_, shader);
		glLinkProgram(program_);
		glDeleteShader(shader);
		unif_uProjection = glGetUniformLocation(program_, "uProjection");
		unif_uView = glGetUniformLocation(program_, "uView");
	}
	void SetUProjection(const glm::mat4 &v) { glProgramUniformMatrix4fv(program_, unif_uProjection, 1, GL_FALSE, glm::value_ptr(v)); }
	GLint GetUProjectionLocation() const { return unif_uProjection; };
	void SetUView(const glm::mat4 &v) { glProgramUniformMatrix4fv(program_, unif_uView, 1, GL_FALSE, glm::value_ptr(v)); }
	GLint GetUViewLocation() const { return unif_uView; };
};
}
#endif
