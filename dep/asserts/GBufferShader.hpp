//GENERATED BY GLSL_GEN
#ifndef GBUFFERSHADER_HPP
#define GBUFFERSHADER_HPP
#include <glm/glm.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <fstream>
#include <GL/gl3w.h>
namespace asserts {
class GBufferShader {
private:
	GLuint program_{0};
public:
	void Use() const { glUseProgram(program_); }
	GLuint Get() const { return program_; }
	GBufferShader() = default;
	~GBufferShader(){ if(program_ != 0) glDeleteProgram(program_); }
	GBufferShader(const GBufferShader &) = delete;
	GBufferShader& operator= (const GBufferShader &) = delete;
private:
	GLint unif_uHaveNormalTexture;
	GLint unif_uProjection;
	GLint unif_uView;
public:
	void Initialize() {
		GLuint shader;
		program_ = glCreateProgram();
		std::ifstream in; std::string str;
		char log[100000]; int success;
		in.open("shaders/gbuffer.frag");
		std::getline(in, str, '\0');
		in.close();
		const char *GL_FRAGMENT_SHADER_src = str.c_str();
		shader = glCreateShader(GL_FRAGMENT_SHADER);
		glShaderSource(shader, 1, &GL_FRAGMENT_SHADER_src, nullptr);
		glCompileShader(shader);
		glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
		if(!success) {
			glGetShaderInfoLog(shader, 100000, nullptr, log);
			printf("compile error in shaders/gbuffer.frag:\n%s\n", log);
		}
		glAttachShader(program_, shader);
		glLinkProgram(program_);
		glDeleteShader(shader);
		in.open("shaders/gbuffer.vert");
		std::getline(in, str, '\0');
		in.close();
		const char *GL_VERTEX_SHADER_src = str.c_str();
		shader = glCreateShader(GL_VERTEX_SHADER);
		glShaderSource(shader, 1, &GL_VERTEX_SHADER_src, nullptr);
		glCompileShader(shader);
		glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
		if(!success) {
			glGetShaderInfoLog(shader, 100000, nullptr, log);
			printf("compile error in shaders/gbuffer.vert:\n%s\n", log);
		}
		glAttachShader(program_, shader);
		glLinkProgram(program_);
		glDeleteShader(shader);
		unif_uHaveNormalTexture = glGetUniformLocation(program_, "uHaveNormalTexture");
		unif_uProjection = glGetUniformLocation(program_, "uProjection");
		unif_uView = glGetUniformLocation(program_, "uView");
	}
	void SetUHaveNormalTexture(bool v) { glProgramUniform1i(program_, unif_uHaveNormalTexture, v); }
	GLint GetUHaveNormalTextureLocation() const { return unif_uHaveNormalTexture; };
	void SetUProjection(const glm::mat4 &v) { glProgramUniformMatrix4fv(program_, unif_uProjection, 1, GL_FALSE, glm::value_ptr(v)); }
	GLint GetUProjectionLocation() const { return unif_uProjection; };
	void SetUView(const glm::mat4 &v) { glProgramUniformMatrix4fv(program_, unif_uView, 1, GL_FALSE, glm::value_ptr(v)); }
	GLint GetUViewLocation() const { return unif_uView; };
};
}
#endif
