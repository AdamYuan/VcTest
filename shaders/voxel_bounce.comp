#version 450 core
layout (local_size_x = 2, local_size_y = 2, local_size_z = 2) in;

layout (binding = 0, rgba8) uniform writeonly image3D uVoxelRandiance;

layout (binding = 0) uniform sampler3D uVoxelAlbedo;
layout (binding = 1) uniform sampler3D uVoxelNormal;
layout (binding = 2) uniform sampler3D uVoxelRadianceMipmaps[6];

uniform ivec3 uVoxelDimension;

vec4 SampleVoxel(in vec3 world_pos, in float lod, in ivec3 indices, in vec3 weights)
{
	vec3 voxel_uv = ((world_pos - uVoxelGridRangeMin) / uVoxelWorldSize) / vec3(uVoxelDimension);
	voxel_uv.xy += 1.0f / vec2(uVoxelDimension.xy);

	float mipmap_lod = max(0.0f, lod - 1.0f);
	vec4 mipmap_color = vec4(0.0f);
	if(lod > 0.0f)
	{
		if(weights.x > 0.0f)
			mipmap_color += textureLod(uVoxelAlbedoMipmaps[indices.x], voxel_uv, mipmap_lod) * weights.x;
		if(weights.y > 0.0f)
			mipmap_color += textureLod(uVoxelAlbedoMipmaps[indices.y], voxel_uv, mipmap_lod) * weights.y;
		if(weights.z > 0.0f)
			mipmap_color += textureLod(uVoxelAlbedoMipmaps[indices.z], voxel_uv, mipmap_lod) * weights.z;
	}

	if(lod < 1.0f)
		return mix(texture(uVoxelAlbedo, voxel_uv), mipmap_color, lod);
	else
		return mipmap_color;
}

vec3 ConeTrace(in vec3 start_pos, in vec3 direction, in float tan_half_angle)
{
	vec4 color = vec4(0.0f);

	float dist = 0.5f;

	ivec3 load_indices = ivec3(
			direction.x < 0.0f ? 0 : 1, 
			direction.y < 0.0f ? 2 : 3, 
			direction.z < 0.0f ? 4 : 5);
	vec3 weights = direction * direction;

	while(dist < 32.0f && color.a < 1.0f)
	{
		vec3 pos = start_pos + dist * direction;

		float diameter = max(uVoxelWorldSize, 2.0f * tan_half_angle * dist);
		float lod = log2(diameter / uVoxelWorldSize);
		vec4 voxel_color = SampleVoxel(pos, lod, load_indices, weights);
		color += voxel_color * (1.0f - color.a);

		dist += diameter * 0.5f;
	}

	return color.rgb;
}

vec3 IndirectLight(in vec3 start_pos, in mat3 matrix)
{
	vec3 color = vec3(0.0f);

	for(int i = 0; i < kDiffuseConeNum; i++)
		color += kConeWeights[i] * ConeTrace(start_pos, normalize(matrix * kConeDirections[i]), 0.1f);

	return color * PI;
}

void main()
{
	if(
			gl_GlobalInvocationID.x >= uVoxelDimension.x || 
			gl_GlobalInvocationID.y >= uVoxelDimension.y ||
			gl_GlobalInvocationID.z >= uVoxelDimension.z) 
		return;

	ivec3 write_pos = ivec3(gl_GlobalInvocationID);
	vec3 normal = texelFetch(uVoxelNormal, write_pos, 0);
}
