#version 450 core
#define PI 3.14159265f
layout (local_size_x = 2, local_size_y = 2, local_size_z = 2) in;

layout (binding = 0, rgba16) uniform writeonly image3D uVoxelRadiance;

layout (binding = 0) uniform sampler3D uVoxelAlbedo;
layout (binding = 1) uniform sampler3D uVoxelNormal;
layout (binding = 2) uniform sampler3D uVoxelRadianceMipmaps[6];

uniform ivec3 uVoxelDimension;

//cheap 4 cone indirect trace
const vec3 kConeDirections[4] = 
{
    vec3(0.0f, 0.0f, 1.0f),
    vec3(0.0f, 0.866025f, 0.5f),
    vec3(0.754996f, -0.4330128f, 0.5f),
    vec3(-0.754996f, -0.4330128f, 0.5f)
};
const float kConeWeights[4] = {0.333333f, 0.222222f, 0.222222f, 0.222222f};

mat3 GetTBN(in vec3 normal)
{
	vec3 tangent;
	vec3 v1 = cross(normal, vec3(0.0f, 0.0f, 1.0f)), v2 = cross(normal, vec3(0.0f, 1.0f, 0.0f));
	if(dot(v1, v1) > dot(v2, v2))
		tangent = v1;
	else
		tangent = v2;

	return mat3(tangent, cross(tangent, normal), normal);
}

vec4 SampleVoxel(in vec3 uv, in float lod, in ivec3 indices, in vec3 weights)
{
	float mipmap_lod = max(0.0f, lod - 1.0f);
	vec4 mipmap_color = vec4(0.0f);
	if(weights.x > 0.0f)
		mipmap_color += textureLod(uVoxelRadianceMipmaps[indices.x], uv, mipmap_lod) * weights.x;
	if(weights.y > 0.0f)
		mipmap_color += textureLod(uVoxelRadianceMipmaps[indices.y], uv, mipmap_lod) * weights.y;
	if(weights.z > 0.0f)
		mipmap_color += textureLod(uVoxelRadianceMipmaps[indices.z], uv, mipmap_lod) * weights.z;
	return mipmap_color;
}

vec3 ConeTrace(in vec3 start_pos, in vec3 direction, in float tan_half_angle)
{
	vec4 color = vec4(0.0f);

	float dist = 1.0f;//skip a voxel

	ivec3 load_indices = ivec3(
			direction.x < 0.0f ? 0 : 1, 
			direction.y < 0.0f ? 2 : 3, 
			direction.z < 0.0f ? 4 : 5);
	vec3 weights = direction * direction;

	while(dist < 512.0f && color.a < 1.0f)
	{
		vec3 pos = start_pos + dist * direction;

		float diameter = max(1.0f, 2.0f * tan_half_angle * dist);
		float lod = log2(diameter);
		vec4 voxel_color = SampleVoxel(pos / vec3(uVoxelDimension), lod, load_indices, weights);
		color += voxel_color * (1.0f - color.a);

		dist += diameter;
	}

	return color.rgb;
}

vec3 IndirectLight(in vec3 start_pos, in mat3 matrix)
{
	vec3 color = vec3(0.0f);

	for(int i = 0; i < 4; i++)
		color += kConeWeights[i] * ConeTrace(start_pos, normalize(matrix * kConeDirections[i]), 1.0f);

	return color * PI;
}

void main()
{
	if(
			gl_GlobalInvocationID.x >= uVoxelDimension.x || 
			gl_GlobalInvocationID.y >= uVoxelDimension.y ||
			gl_GlobalInvocationID.z >= uVoxelDimension.z) 
		return;

	ivec3 write_pos = ivec3(gl_GlobalInvocationID);
	vec4 albedo = texelFetch(uVoxelAlbedo, write_pos, 0);
	if(albedo.a < 0.001f)
		return;

	vec3 normal = texelFetch(uVoxelNormal, write_pos, 0).rgb * 2.0f - 1.0f;

	vec3 indirect_light = IndirectLight(vec3(write_pos), GetTBN(normal));
	indirect_light *= albedo.rgb;

	imageStore(uVoxelRadiance, write_pos, vec4(indirect_light, albedo.a));
}
